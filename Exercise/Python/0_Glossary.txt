Numpy_glossary = """
NumPy Commands Glossary

1. np.array
- Create a N-dimensional array.

2. np.arange
- Return evenly spaced values within a given interval.

3. np.zeros
- Return a new array of given shape and type, filled with zeros.

4. np.ones
- Return a new array of given shape and type, filled with ones.

5. np.empty
- Return a new array of given shape and type, without initializing entries.

6. np.full
- Return a new array of given shape and type, filled with a specified value.

7. np.linspace
- Return evenly spaced numbers over a specified interval.

8. np.eye
- Create a 2-D array with ones on the diagonal and zeros elsewhere.

9. np.random.rand
- Return a sample (or samples) from a uniform distribution over [0, 1).

10. np.random.randn
- Return a sample (or samples) from the "standard normal" distribution.

11. np.random.randint
- Return random integers from the “discrete uniform” distribution of the specified dtype.

12. np.dot
- Dot product of two arrays.

13. np.matmul
- Matrix product of two arrays.

14. np.transpose
- Permute the dimensions of an array.

15. np.reshape
- Gives a new shape to an array without changing its data.

16. np.squeeze
- Remove single-dimensional entries from the shape of an array.

17. np.concatenate
- Join a sequence of arrays along an existing axis.

18. np.split
- Split an array into multiple sub-arrays.

19. np.sum
- Sum of array elements over a given axis.

20. np.mean
- Compute the arithmetic mean along the specified axis.

21. np.std
- Compute the standard deviation along the specified axis.

22. np.var
- Compute the variance along the specified axis.

23. np.min
- Return the minimum of an array or minimum along an axis.

24. np.max
- Return the maximum of an array or maximum along an axis.

25. np.argmin
- Returns the indices of the minimum values along an axis.

26. np.argmax
- Returns the indices of the maximum values along an axis.

27. np.where
- Return elements chosen from x or y depending on condition.


Complicated usage with Python:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

a = np.array([1, 2, 3, 4])
b = np.array([5, 6, 7, 8])

# Element-wise sum
c = a + b  # array([6, 8, 10, 12])

------------------------------------------------------------------

a = np.array([1, 2, 3])
b = 2

# Scalar multiplication
c = a * b  # array([2, 4, 6])'

-----------------------------------------------------------------

a = np.array([1, 2, 3, 4, 5, 6, 7, 8])

# Boolean indexing
b = a[a > 4]  # array([5, 6, 7, 8])

# Fancy indexing
c = a[[1, 3, 5]]  # array([2, 4, 6])

-----------------------------------------------------------------

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])

# Matrix multiplication
c = np.dot(a, b)

----------------------------------------------------------------

a = np.array([1, 2, 3, 4, 5])

# Mean, median, standard deviation
mean_a = np.mean(a)
median_a = np.median(a)
std_a = np.std(a)

----------------------------------------------------------------

a = np.array([1, np.nan, 3, 4, 5])

# Ignore 'nan' values for mean calculation
mean_a = np.nanmean(a)




with open("Lab1_pikachu.txt", "r") as file:

    next(file)
    for line in file:
        width, height = line.strip().replace("(", "").replace(")", "").split(",")
        width = float(width)
        height = float(height)
        Pikachu_data.append((width, height))

with open("Lab1_pichu.txt", "r") as file:
    next(file)
    for line in file:
        width, height = line.strip().replace("(", "").replace(")", "").split(",")
        width = float(width)
        height = float(height)
        Pichu_data.append((width, height))


def Training_Data(Pikachu_data, Pichu_data, num_samples=45):

    Training_Pikachu = random.sample(Pikachu_data, num_samples)
    Training_Pichu = random.sample(Pichu_data, num_samples)
    Training_mean_width_height_Pikachu = np.mean(Training_Pikachu, axis=0)
    training_mean_width_height_Pichu = np.mean(Training_Pichu, axis=0)

    return Training_mean_width_height_Pikachu, training_mean_width_height_Pichu
